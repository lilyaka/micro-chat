package com.revotech.chatserver.business.migration

import com.revotech.chatserver.business.conversation.ConversationRepository
import com.revotech.chatserver.business.group.GroupService
import org.springframework.boot.CommandLineRunner
import org.springframework.stereotype.Component

/**
 * Migration script ƒë·ªÉ update existing conversations v·ªõi groupId
 * Ch·∫°y 1 l·∫ßn ƒë·ªÉ sync data
 */
@Component
class ConversationGroupIdMigration(
    private val conversationRepository: ConversationRepository,
    private val groupService: GroupService
) : CommandLineRunner {

    override fun run(vararg args: String?) {
        println("üîÑ Starting Conversation-Group migration...")

        val conversations = conversationRepository.findAll()
        var updatedCount = 0

        conversations.forEach { conversation ->
            if (conversation.isGroup && conversation.groupId == null) {
                // C√°ch 1: N·∫øu conversationId = groupId (t·ª´ createGroupConversation)
                val group = groupService.getGroup(conversation.id!!)
                if (group != null) {
                    conversation.groupId = conversation.id
                    conversationRepository.save(conversation)
                    updatedCount++
                    println("‚úÖ Updated conversation ${conversation.id} with groupId ${conversation.id}")
                } else {
                    // C√°ch 2: T√¨m group by name v√† members (fallback)
                    // TODO: Implement logic t√¨m group matching n·∫øu c·∫ßn
                    println("‚ö†Ô∏è No group found for conversation ${conversation.id} (${conversation.name})")
                }
            }
        }

        println("üéØ Migration completed: Updated $updatedCount conversations")
    }
}